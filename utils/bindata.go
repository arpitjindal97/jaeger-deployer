// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package utils generated by go-bindata.// sources:
// configs/hotrod-template.yaml
// configs/ingress-template.yaml
// configs/performance.yaml
// configs/values-template.yaml
package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hotrodTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xe2\x38\x10\x7e\xcf\xaf\xb0\x50\x5f\x81\x72\x77\xba\x56\x7e\x43\x5c\x8e\xeb\x1d\x2d\x51\xca\xad\xb4\x4f\x68\x6a\x66\xc1\x5b\xc7\xb6\xec\x09\xdb\x68\xb5\xff\x7d\x95\x84\xd0\x24\x1b\x68\x2a\xb5\xab\xe5\x29\xc4\xe3\x2f\xdf\xcc\x7c\x9f\x3d\xc3\xe1\x30\x00\x2b\x3f\xa0\xf3\xd2\x68\xce\xc0\x5a\x3f\xde\x4f\x82\x47\xa9\x37\x9c\xfd\x85\x56\x99\x2c\x41\x4d\x41\x82\x04\x1b\x20\xe0\x01\x63\x1a\x12\xe4\xec\x62\x15\xde\x46\xc3\x9d\x21\x67\x36\x01\x63\x0a\x1e\x50\xf9\x7c\x99\xe5\x28\xa3\xc7\xf4\x01\x9d\x46\x42\x3f\x92\x66\x5c\x6e\x39\x06\x77\x85\x48\xed\x09\xb4\xa8\x90\x4f\x44\xed\x2b\xa6\x83\xc9\x68\x72\x35\xba\x1c\x9c\x88\x13\x26\xb1\x46\xa3\xa6\x22\x27\x25\x05\x90\x34\x3a\xf0\x16\x45\xce\xd1\x61\xf1\xce\x73\x36\x09\x18\xf3\xa8\x50\x90\x71\x25\xfb\x04\x48\xec\x16\xb5\x74\x7a\x25\xd4\x37\xa5\x57\x90\x65\xcc\x93\x03\xc2\x6d\x56\xf2\xa0\xcc\x22\x67\x31\x0a\x87\x40\x18\x30\x46\x98\x58\x05\x84\x07\xde\xb5\x16\xe5\x3f\xd5\x48\xa1\x67\x12\xfd\xd3\x78\x55\x22\x8c\x55\x95\x2f\x9e\x51\xa4\x4e\x52\x36\x33\x9a\xf0\x89\x9e\x29\x7e\xfd\x76\x78\x14\x46\x13\x48\x8d\xae\xc6\x7f\xd8\x21\xbc\x21\x58\x7b\x0c\x38\x03\xdc\x00\xcf\x7f\x32\x81\x2d\x72\xf6\x19\x70\x8b\x8e\x1c\x08\xa9\xb7\x63\x7c\x82\xc4\x2a\x3c\x60\xf3\x5c\x61\xed\x2d\x51\xaa\x54\x64\x94\x14\x19\x67\x37\x9f\xee\x0c\x45\x0e\x7d\x6e\x90\xe7\x38\xd4\xfb\xe6\x87\x2b\xe2\xff\x4e\xc3\x79\x18\xaf\xa7\xf3\xf0\x6e\xb5\xfe\x67\x79\xbf\x6a\x44\x31\xb6\x07\x95\x22\x67\xca\x08\x50\x3b\xe3\xe9\x65\x90\x68\x19\x9f\x00\x19\xfc\x79\xfd\xfb\x64\x50\x5b\xb3\xc6\x91\xef\xe6\x95\xca\x16\xc6\xb1\xfa\x91\x71\xc4\xd9\xf5\xe5\xf5\x65\x2b\xc2\x3a\x43\x46\x18\xc5\xd9\x6a\x16\xd5\xd6\x1c\x7a\x93\x3a\x81\xfe\x4c\xe9\xf7\x46\xa5\x09\xde\x9a\x54\x37\x09\x29\xb9\x47\x8d\xde\x47\xce\x3c\x60\x73\xff\x8e\xc8\xce\xb1\xd5\x4f\xc6\x2c\xd0\x8e\xb3\x71\xfb\x6d\x41\xba\x91\x94\x43\xd8\xc8\x77\xc1\xee\x16\xe5\x16\x35\x0d\xbd\xdc\xa0\x00\xf7\x76\xf2\x2c\xff\x95\xe8\xbc\x3c\xfe\xde\x52\x9e\x71\x98\xcb\x29\x8c\xd7\xf3\x38\x9a\x15\xfa\x3c\xa3\xaf\x8b\xd9\x72\xb1\x08\x67\xab\x65\xbc\xfe\x3f\x5e\xf4\xc0\x5b\x2d\xee\x4f\x28\x95\x5c\x8a\x83\x7e\x08\xeb\xd9\xb4\x1b\x64\x4c\xca\x8f\x05\x8c\x84\xeb\x76\x4d\x07\x52\x78\x2a\xb5\x02\x8b\x94\x7f\x05\xd8\x7f\xe1\xc7\x17\xb0\x1e\x31\xeb\x67\x46\xd8\x24\x52\x9f\xf7\xe3\xe4\x8f\xdf\xae\x26\x3d\x0d\x79\xca\x6c\xb5\x0f\x16\x62\x25\xe5\x5b\x88\x49\xbe\x27\x2a\x5d\xf0\xe3\x6a\xee\xa8\xa5\x56\x19\x67\x79\xfb\xde\xcd\xc5\xed\x6a\xbc\xb1\x91\xeb\xf0\x1b\xed\x2b\xe7\xcc\x54\xea\x09\xdd\xdf\xd2\x1d\x0f\x61\x87\x9e\xc0\x51\x15\x31\x55\x5f\x20\xab\x6a\x52\xd6\xb8\xe3\xa6\xea\x2a\xad\xcf\xaf\xef\x16\xc9\xf2\xdd\x5d\xed\x20\xc9\xf7\xb4\x67\xb3\xe3\x58\x76\x8f\x6e\x2f\x05\xfe\x32\x33\xd9\x0b\xb3\x56\x4d\xec\x55\x61\xf2\x56\x05\xf5\x46\x1c\x2f\x98\x2e\x1d\x13\xb8\x2d\x52\xf4\x7c\xf4\x36\xe7\xb5\x9f\x9f\x59\x35\x8a\x1d\x74\x72\x13\x15\xbd\xfa\x1e\x00\x00\xff\xff\xfd\xae\x85\xaa\x4c\x0b\x00\x00")

func hotrodTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_hotrodTemplateYaml,
		"hotrod-template.yaml",
	)
}

func hotrodTemplateYaml() (*asset, error) {
	bytes, err := hotrodTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hotrod-template.yaml", size: 2892, mode: os.FileMode(420), modTime: time.Unix(1583126065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ingressTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5d\x6f\xda\x4a\x10\x7d\xf7\xaf\x18\xf9\xfa\x21\xb9\xd2\x9a\x9b\xe8\xb6\x8a\xf6\x8d\x52\xab\x4d\x4b\x02\x35\xd0\x2a\x52\x25\xb4\xac\x27\xc6\xc5\xec\x3a\xbb\x63\x52\xa4\xfe\xf8\x6a\x6d\x43\x0d\xb1\xf2\xa1\xe6\xcd\x3e\x9a\xd9\x99\x33\x73\xce\x30\xc6\x3c\x51\x64\x5f\xd1\xd8\x4c\x2b\x0e\x9b\x33\x6f\x95\xa9\x84\xc3\x04\xa5\x41\xf2\xd6\x48\x22\x11\x24\xb8\x07\xa0\xc4\x1a\x39\x04\xd3\xe8\x6a\xcc\x28\xb7\x1e\x6d\x0b\xe4\x30\x2a\xc4\x5d\x89\xde\x2e\xa8\x10\xd6\xde\x6b\x93\x70\x08\xc6\xfd\xc9\xe4\xdb\x28\x7e\xef\x01\x94\x16\x4d\x93\x3e\x9b\x44\xf1\x75\xff\x2a\xf2\x00\xa4\x08\xa5\x21\x0e\xc1\xa0\x3f\x1f\xc4\xd3\x1a\x59\xe1\xb6\x46\x3e\x47\x37\x1e\x00\xe5\xb6\x09\x9a\x0e\x27\x4d\x94\xc3\xea\x30\x87\xd5\x71\xa2\xa4\x25\x87\xe0\x5d\x7f\x72\x39\x98\xf7\x67\xd3\x8f\xde\x31\x35\x85\x74\xaf\xcd\x2a\x53\x69\xb8\xba\xb0\x61\xa6\x7b\x9b\xb3\x05\x92\xd8\x31\xbe\x54\xa9\x41\x6b\x0f\x28\xff\x93\x8b\x05\xe6\xb6\xfa\x4c\x85\x49\x50\x85\x56\x14\x32\xd7\x65\xe2\x1e\x28\x4a\x53\x68\x8b\x1c\xd6\x42\x89\x14\x13\x26\xd1\xd0\xd1\xa4\xee\x4a\x34\xdb\x06\xb3\x85\x90\xc8\x21\xc1\x5b\x51\xe6\x2e\x50\x28\xa5\x49\x50\xa6\x55\x55\x03\x40\xa5\x99\xfa\x19\x66\x75\x2b\xe1\xaa\x5c\xa0\x51\x48\x58\xb5\xeb\x28\xb2\x7a\xe8\x7e\xe0\x28\xce\xa7\x37\xe3\xc8\x7f\x5e\x9e\xad\xf6\xd9\x5e\xdf\xb3\xd2\x0c\x8a\x7c\xcd\xc1\x1f\xea\x34\x53\x40\x1a\xb6\xba\x34\xf0\x49\x60\x8a\xe6\xe9\xca\x06\xef\x4d\x46\xc8\x48\x98\xd4\x15\xef\x7d\x0f\xce\x3d\x5b\xa0\x74\x64\x4d\x99\x63\xc3\x9a\xc1\x52\x5b\xd7\xdc\x97\x59\x14\xdf\xcc\x67\xf1\xb0\x82\x01\x96\x44\x05\x6f\xbe\x9d\xb6\x68\x69\xff\xfc\xba\x3c\x07\x71\xe8\x49\x9d\xe7\x28\x49\x9b\x93\xde\xaf\xe0\xf4\x24\xfc\xf7\xb4\x15\x05\xb0\x10\x72\x85\x2a\xe1\x07\x20\x80\x45\xb3\xc9\x24\x5e\xb7\xb6\xf5\xa3\x62\xc6\xf6\xef\x75\x67\x8c\xb5\x53\xe4\xd9\xff\xe7\x6f\x2f\xba\xba\x59\x6a\x32\x3a\xf9\xdb\x56\xea\x57\x1e\x6b\xe0\xe2\xbf\xae\xea\x27\xaf\xc0\x7f\x27\xda\xc7\x4b\x53\x7e\xb0\xbf\xd6\x6a\xd8\xc3\x55\xd6\x02\xbc\x3e\xbc\x21\x4d\xa1\xd7\xb0\xea\x8b\xac\xd4\x0c\x84\x15\x46\x93\x96\x3a\xe7\xe0\x7f\x88\xc7\x83\xa7\x15\x9d\x9a\x42\xb2\xdd\x38\xc1\x27\x53\xe2\x33\x0d\xe8\xd8\x6e\xd0\x64\xb7\x5b\x26\xf3\x0c\x15\x71\xf0\xb5\x7a\x41\xf2\xce\xc1\x7e\x73\x3e\x7a\xfb\x29\xfa\x47\x27\xa7\xad\xde\x8e\xb3\xf3\xc0\x80\x7b\xfb\x0d\x46\xc3\x61\x34\x98\x8e\xe2\xfd\xde\xda\x06\x3c\xb0\x1f\xeb\x12\xd5\xcb\x0c\x75\x6c\xa6\x37\x2d\x4d\x1d\x28\x8a\x75\x75\xd6\xa9\xa7\x4a\x49\xde\xef\x00\x00\x00\xff\xff\x96\x62\xba\xd1\xd5\x06\x00\x00")

func ingressTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_ingressTemplateYaml,
		"ingress-template.yaml",
	)
}

func ingressTemplateYaml() (*asset, error) {
	bytes, err := ingressTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ingress-template.yaml", size: 1749, mode: os.FileMode(420), modTime: time.Unix(1583330422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _performanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4f\xf3\x30\x14\x85\x77\xff\x8a\x3b\x74\xcd\xdb\xbe\x62\xf3\x56\xd1\x0e\x20\xf5\x43\x04\x58\x10\x42\xb7\xce\x21\x18\x1c\xdb\xb2\x1d\xa3\x0a\xf1\xdf\x91\x85\x02\x29\x2d\x9c\x2d\x39\xcf\x7d\x74\xcc\x5e\xdf\x22\x44\xed\xac\xa4\x1d\x27\xf5\x34\xcd\xff\xc5\x8b\xb6\x8d\xa4\x4b\xb7\x13\x1d\x12\x37\x9c\x58\x0a\x22\xcb\x1d\x24\x3d\x33\x5a\x84\xca\x23\x3c\xba\xd0\xb1\x55\x10\xd1\x43\x15\x80\x55\xd2\x19\x0b\x70\x63\xb4\x45\x0d\xe5\x6c\x13\x25\x9d\xcd\x66\x82\x28\xa1\xf3\x86\x13\x0a\x48\x34\xf6\x96\xfc\xea\x2e\xe5\xe0\x2f\x51\xce\x26\xd6\x16\x21\x0e\x7f\x88\xaa\xbf\xcf\x3f\xa3\x3b\x6e\x21\xa9\x55\xe1\x9f\x76\xd3\xa8\x7c\x05\xdb\xc6\x90\x0b\xdd\x20\x57\xad\xf2\xd3\x63\x81\x2c\x93\x63\xfa\xe9\xd9\xf6\xc6\x6c\x9d\xd1\x6a\x2f\x69\x6e\x5e\x79\x1f\x47\x04\x6c\x96\xa3\xcf\xef\x7d\xe7\x37\xf5\xf5\x66\xb5\xbc\x7a\x58\xcf\x57\xcb\x03\x82\x28\xb3\xe9\x21\xe9\x6e\x32\x40\xf5\xfd\x49\xc7\x62\xb3\x9a\x5f\xac\x4f\x1f\x4f\x8e\xca\x80\xe8\xfa\xa0\x10\x0f\x07\xbd\xbd\x8b\xaf\x3e\x71\x48\xc3\x53\xd6\xc8\x08\xe2\x23\x00\x00\xff\xff\x9e\x61\x0b\xaf\x13\x02\x00\x00")

func performanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_performanceYaml,
		"performance.yaml",
	)
}

func performanceYaml() (*asset, error) {
	bytes, err := performanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "performance.yaml", size: 531, mode: os.FileMode(420), modTime: time.Unix(1583129365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _valuesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x90\xcd\x6e\xdb\x30\x10\x84\xef\x7c\x8a\x3d\xf8\x1c\x58\x46\x83\x02\xbc\x31\x36\xeb\x04\x4e\x6c\x43\xd2\xad\x28\x8c\x0d\xb5\x56\x08\xfd\x50\xd9\xa5\xda\xf8\xed\x0b\x2b\x36\x52\xb9\x40\x73\xaa\x6f\xe4\x72\x38\xf3\xed\x74\x1c\x7e\x7a\xf1\xa1\x5d\x60\xc4\x2c\x06\x26\xad\x00\x1c\x8a\x60\x5b\x30\x6a\xd8\x63\x2d\xa4\x00\xa8\x46\x89\xde\x09\x21\xbb\x97\xf3\x58\x45\x2c\x35\x24\x37\xc9\xd7\x9b\xa9\x52\x12\x03\x63\x39\x18\xc4\x43\x47\x1a\x26\x59\xbe\x49\xcd\xd2\x8e\x1c\x15\x00\x40\x45\x07\xe9\xd0\x1d\x35\xb9\x7d\xda\x0e\xb3\x97\x20\x51\xc3\x64\x6e\xb2\xcc\xac\x17\xa9\xd9\xdd\x6f\xb2\x5c\x01\x54\xb8\xaf\x4e\xdf\x9e\x39\x54\xc4\xa2\xe1\xfb\x64\x65\xbe\xad\xcc\xee\x2e\xdd\xac\x6c\xfa\x63\x78\x8c\xa1\xf3\xee\xc3\x70\x0c\xfc\x67\x82\x7d\x34\x59\xfe\x30\xcf\xac\x49\xe7\xf7\xe7\x14\x80\x5e\x68\x8b\x22\xbf\x02\x17\x1f\x6b\x03\xf8\xb6\xa0\xb7\x2d\xd3\xde\xbf\x9d\xcd\xd5\x68\x1b\x17\xda\xbd\x2f\xdf\x13\x0a\xb7\x6b\xb1\xa1\xd1\x1a\x8b\xb9\x52\xbe\x2d\x49\x22\xf1\x51\x45\x2d\x3e\xd7\x54\x68\x98\x3c\xac\x97\x36\xcb\x6d\xba\xb3\x6b\x73\xf7\x68\x17\x0a\x80\x49\x42\xcf\x8e\xe4\xdd\xaf\xf6\x8d\x8f\xa7\x33\x80\xeb\x7a\x0d\xb3\xd3\xa5\xa1\x26\xf0\x41\xc3\x6c\xe9\x87\x09\xd3\x6b\x4f\x72\x21\x4e\x2e\xc4\xc9\x74\xf6\xe5\xc9\x2b\xe5\x42\x5d\x93\x8b\x61\x00\xba\x52\x26\x96\xd4\xc6\x51\x01\xe7\x92\x3f\x07\xf8\xcb\xf3\x5f\x00\xb7\xd3\x69\x73\xa1\xbf\x4d\x66\x47\x84\xd7\x9e\xf8\x30\x42\x88\xdc\x5f\x95\x40\x3a\xe4\xea\x93\x12\xe0\xbf\x32\xfc\x0e\x00\x00\xff\xff\x39\x45\x0b\xe4\xf2\x03\x00\x00")

func valuesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesTemplateYaml,
		"values-template.yaml",
	)
}

func valuesTemplateYaml() (*asset, error) {
	bytes, err := valuesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values-template.yaml", size: 1010, mode: os.FileMode(420), modTime: time.Unix(1582972941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hotrod-template.yaml":  hotrodTemplateYaml,
	"ingress-template.yaml": ingressTemplateYaml,
	"performance.yaml":      performanceYaml,
	"values-template.yaml":  valuesTemplateYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hotrod-template.yaml":  &bintree{hotrodTemplateYaml, map[string]*bintree{}},
	"ingress-template.yaml": &bintree{ingressTemplateYaml, map[string]*bintree{}},
	"performance.yaml":      &bintree{performanceYaml, map[string]*bintree{}},
	"values-template.yaml":  &bintree{valuesTemplateYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
